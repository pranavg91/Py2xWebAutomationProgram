{"name": "test_vwologin_negative_TC", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=123.0.6312.122)\nStacktrace:\n\tGetHandleVerifier [0x00007FF699E17032+63090]\n\t(No symbol) [0x00007FF699D82C82]\n\t(No symbol) [0x00007FF699C1EC65]\n\t(No symbol) [0x00007FF699C1AC1A]\n\t(No symbol) [0x00007FF699C0D514]\n\t(No symbol) [0x00007FF699C0E8F8]\n\t(No symbol) [0x00007FF699C0D7FF]\n\t(No symbol) [0x00007FF699C0D104]\n\t(No symbol) [0x00007FF699C0D021]\n\t(No symbol) [0x00007FF699C0B0A8]\n\t(No symbol) [0x00007FF699C0B8BC]\n\t(No symbol) [0x00007FF699C214AD]\n\t(No symbol) [0x00007FF699CA3D67]\n\t(No symbol) [0x00007FF699C86FDA]\n\t(No symbol) [0x00007FF699CA3412]\n\t(No symbol) [0x00007FF699C86D83]\n\t(No symbol) [0x00007FF699C583A8]\n\t(No symbol) [0x00007FF699C59441]\n\tGetHandleVerifier [0x00007FF69A2125AD+4238317]\n\tGetHandleVerifier [0x00007FF69A24F70D+4488525]\n\tGetHandleVerifier [0x00007FF69A2479EF+4456495]\n\tGetHandleVerifier [0x00007FF699EF0576+953270]\n\t(No symbol) [0x00007FF699D8E54F]\n\t(No symbol) [0x00007FF699D89224]\n\t(No symbol) [0x00007FF699D8935B]\n\t(No symbol) [0x00007FF699D79B94]\n\tBaseThreadInitThunk [0x00007FFC71027C24+20]\n\tRtlUserThreadStart [0x00007FFC72FCD721+33]", "trace": "def test_vwologin_negative_TC():\n        driver=webdriver.Chrome()\n>       driver.get(\"https://app.vwo.com/#/login\")\n\nsrc\\15april2024\\lab0015.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002572E9C4EF0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF699D79B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC71027C24+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC72FCD721+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=123.0.6312.122)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF699E17032+63090]\nE       \t(No symbol) [0x00007FF699D82C82]\nE       \t(No symbol) [0x00007FF699C1EC65]\nE       \t(No symbol) [0x00007FF699C1AC1A]\nE       \t(No symbol) [0x00007FF699C0D514]\nE       \t(No symbol) [0x00007FF699C0E8F8]\nE       \t(No symbol) [0x00007FF699C0D7FF]\nE       \t(No symbol) [0x00007FF699C0D104]\nE       \t(No symbol) [0x00007FF699C0D021]\nE       \t(No symbol) [0x00007FF699C0B0A8]\nE       \t(No symbol) [0x00007FF699C0B8BC]\nE       \t(No symbol) [0x00007FF699C214AD]\nE       \t(No symbol) [0x00007FF699CA3D67]\nE       \t(No symbol) [0x00007FF699C86FDA]\nE       \t(No symbol) [0x00007FF699CA3412]\nE       \t(No symbol) [0x00007FF699C86D83]\nE       \t(No symbol) [0x00007FF699C583A8]\nE       \t(No symbol) [0x00007FF699C59441]\nE       \tGetHandleVerifier [0x00007FF69A2125AD+4238317]\nE       \tGetHandleVerifier [0x00007FF69A24F70D+4488525]\nE       \tGetHandleVerifier [0x00007FF69A2479EF+4456495]\nE       \tGetHandleVerifier [0x00007FF699EF0576+953270]\nE       \t(No symbol) [0x00007FF699D8E54F]\nE       \t(No symbol) [0x00007FF699D89224]\nE       \t(No symbol) [0x00007FF699D8935B]\nE       \t(No symbol) [0x00007FF699D79B94]\nE       \tBaseThreadInitThunk [0x00007FFC71027C24+20]\nE       \tRtlUserThreadStart [0x00007FFC72FCD721+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1713585061848, "stop": 1713585105894, "uuid": "23e0700f-7a61-48a3-baf9-7d6cfff7ac56", "historyId": "7bd3fcaa19b984ee7b97c7abb3a67b9b", "testCaseId": "7bd3fcaa19b984ee7b97c7abb3a67b9b", "fullName": "src.15april2024.lab0015#test_vwologin_negative_TC", "labels": [{"name": "parentSuite", "value": "src.15april2024"}, {"name": "suite", "value": "lab0015"}, {"name": "host", "value": "DESKTOP-K766CG4"}, {"name": "thread", "value": "14408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.15april2024.lab0015"}]}